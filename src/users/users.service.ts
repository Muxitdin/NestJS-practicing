import { BadRequestException, Injectable, NotFoundException } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { User } from './users.entity';
import { CreateUserDto } from "./dto/create-user.dto";
import { RolesService } from "../roles/roles.service";
import { UserRoles } from "../shared/entities/user-roles.entity";

@Injectable()
export class UsersService {
    constructor(
        private readonly roleService: RolesService,
        @InjectRepository(User)
        private readonly userRepository: Repository<User>,
        @InjectRepository(UserRoles)
        private readonly userRolesRepository: Repository<UserRoles>,
    ) {}

    async createUser(dto: CreateUserDto): Promise<{ user: User, message: string}> {
        const existingUser = await this.userRepository.findOneBy({email: dto.email});
        if (existingUser) {
            throw new BadRequestException("User already exists");
        }
        const user = this.userRepository.create(dto); // create –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å, –∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—É—â–Ω–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–ø–∏—Å—ã–≤–∞—Ç—å 'await'
        let role = await this.roleService.getRoleByValue("USER")
        if (!role) {
            role = await this.roleService.createRole({ value: "USER", description: "user"})
        }

        // Assign the role to the user by creating a user-role association
        const userRole = new UserRoles(); // –ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—à—å –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ new UserRoles(), —É —Ç–µ–±—è –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞.
        userRole.user = user;
        userRole.role = role;

        await this.userRepository.save(user);
        await this.userRolesRepository.save(userRole);
        console.log(user);
        return {user, message: "User has been created successfully"};

        // –ú–µ—Ç–æ–¥ create() –≤ TypeORM —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –ø–∞–º—è—Ç–∏, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é new, –Ω–æ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏, –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏ —Ä–∞–±–æ—Ç–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏.
        // –ú–µ—Ç–æ–¥ save() —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–æ–≤—ã–π, –æ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç INSERT, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É), –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω UPDATE.
    }

    async deleteUser(id: number): Promise<{ user: User[], message: string}> {
        const user = await this.userRepository.findBy({id}); // –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        console.log("üöÄ ~ UsersService ~ deleteUser ~ user:", user)
        if (user.length === 0) {
            throw new NotFoundException("User not found");
        }
        await this.userRepository.delete(id);
        return { user, message: "User has been deleted successfully"};
    }

    async getAllUsers():Promise<User[]> {
        const users = await this.userRepository.find({relations: ['roles']}); // relations: ['roles'] ‚Äî —ç—Ç–æ –æ–ø—Ü–∏—è TypeORM, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî —Ä–æ–ª–∏) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        return users; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä–Ω–µ—Ç –µ–≥–æ –≤ Promise, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ async –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π, —Ñ—É–Ω–∫—Ü–∏—è –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–º–∏—Å –∏ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –Ω–∞—à –º–µ—Ç–æ–¥ getAllUsers –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Promise<User[]>
    }
}
